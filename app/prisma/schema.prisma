generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String  @id @default(uuid())
  name                String?
  username            String?
  farcasterId         String  @unique
  imageUrl            String?
  bio                 String?
  discord             String?
  github              String?
  notDeveloper        Boolean @default(false)
  govForumProfileUrl  String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  emails            UserEmail[]
  projects          UserProjects[]
  organizations     UserOrganization[]
  addresses         UserAddress[]
  RewardClaim       RewardClaim[]
  interaction       UserInteraction?

  @@index([username])
  @@index([farcasterId])
  @@index([deletedAt])
}

model UserEmail {
  id        String @id @default(uuid())
  email     String
  userId    String
  verified  Boolean @default(false)
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model UserInteraction {
  id                     String   @id @default(uuid())
  userId                 String   @unique
  user                   User     @relation(fields: [userId], references: [id])
  finishSetupLinkClicked Boolean  @default(false)
  orgSettingsVisited     Boolean  @default(false)
  profileVisitCount      Int      @default(0)
  viewProfileClicked     Boolean  @default(false)
  homePageViewCount      Int      @default(0)
  lastInteracted         DateTime @default(now())

  @@index([userId])
}

model UserAddress {
  address String
  userId  String
  source  String

  primary Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@id([address, userId])
  @@index([userId])
}

model FundingRound {
  id          String   @id
  name        String
  imageUrl    String
  description String
  rewards     String?
  startDate   DateTime
  endDate     DateTime

  applications    Application[]
  recipients      FundingReward[]
  Category        Category[]
  ImpactStatement ImpactStatement[]
}

model FundingReward {
  id        String  @id
  roundId   String
  projectId String
  amount    Decimal

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  round   FundingRound @relation(fields: [roundId], references: [id])
  project Project      @relation(fields: [projectId], references: [id])
  claim   RewardClaim?

  @@unique([roundId, projectId])
  @@index([projectId])
}

model RewardClaim {
  rewardId String @id
  status   String

  address        String?
  addressSetAt   DateTime?
  addressSetById String?

  kycStatus          String?
  kycStatusUpdatedAt DateTime?

  grantEligibilityUpdatedAt DateTime?

  tokenStreamStatus      String?
  tokenStreamClaimableAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reward       FundingReward @relation(fields: [rewardId], references: [id])
  addressSetBy User?         @relation(fields: [addressSetById], references: [id])
}

model Organization {
  id          String   @id @default(uuid())
  name        String
  description String?
  avatarUrl   String?
  coverUrl    String?
  website     String[]
  farcaster   String[]
  twitter     String?
  mirror      String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  team      UserOrganization[]
  projects  ProjectOrganization[]
  snapshots OrganizationSnapshot[]

  @@index([deletedAt])
}

model OrganizationSnapshot {
  id            String @id @default(uuid())
  ipfsHash      String
  attestationId String

  createdAt DateTime @default(now())

  organizationId String

  organization Organization @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
}

model UserOrganization {
  id        String    @id @default(uuid())
  role      String    @default("member")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  userId         String
  organizationId String

  user         User         @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])

  @@unique([userId, organizationId])
  @@index([organizationId])
  @@index([userId, deletedAt, role])
  @@index([deletedAt])
  @@index([userId])
}

model ProjectOrganization {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  projectId      String @unique
  organizationId String

  project      Project      @relation(fields: [projectId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])

  @@unique([projectId, organizationId])
  @@index([organizationId])
  @@index([projectId, deletedAt])
}

model Project {
  id           String  @id @default(uuid())
  name         String
  description  String?
  category     String?
  thumbnailUrl String?
  bannerUrl    String?

  website   String[]
  farcaster String[]
  twitter   String?
  mirror    String?

  pricingModel        String?
  pricingModelDetails String?

  openSourceObserverSlug String?
  isSubmittedToOso       Boolean @default(false)

  defiLlamaSlug     String[]

  addedTeamMembers       Boolean  @default(false)
  addedFunding           Boolean  @default(false)
  hasCodeRepositories    Boolean  @default(true)
  isOnChainContract      Boolean  @default(true)
  lastMetadataUpdate     DateTime @default(now())

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  team         UserProjects[]
  organization ProjectOrganization?
  repos        ProjectRepository[]
  contracts    ProjectContract[]
  funding      ProjectFunding[]
  snapshots    ProjectSnapshot[]
  applications Application[]
  rewards      FundingReward[]
  links        ProjectLinks[]
  publishedContracts PublishedContract[]

  @@index([deletedAt, createdAt])
  @@index([deletedAt])
}

model Application {
  id                        String   @id @default(uuid())
  status                    String   @default("submitted")
  attestationId             String
  projectDescriptionOptions String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roundId    String
  projectId  String
  categoryId String?

  round                 FundingRound            @relation(fields: [roundId], references: [id])
  project               Project                 @relation(fields: [projectId], references: [id])
  category              Category?               @relation(fields: [categoryId], references: [id])
  impactStatementAnswer ImpactStatementAnswer[]

  @@index([projectId])
  @@index([roundId])
  @@index([categoryId])
}

model Category {
  id                String        @id @default(uuid())
  name              String
  description       String
  imageUrl          String?
  question          String
  options           String[]
  roundId           String?
  isMultipleChoice  Boolean @default(true)

  round             FundingRound? @relation(fields: [roundId], references: [id])

  impactStatements ImpactStatement[]
  application      Application[]
}

model ImpactStatement {
  id         String  @id @default(uuid())
  categoryId String
  question   String
  subtext    String?

  isRequired          Boolean       @default(true)
  isMarkdownSupported Boolean       @default(true)
  roundId             String?
  limitToCategoryOptions      Int[]         @default([])
  selectionOptions    String[]

  round               FundingRound? @relation(fields: [roundId], references: [id])

  impactStatementAnswer ImpactStatementAnswer[]

  category Category @relation(fields: [categoryId], references: [id])

  @@index([categoryId])
}

model ImpactStatementAnswer {
  id                String @id @default(uuid())
  applicationId     String
  impactStatementId String
  answer            String

  application     Application     @relation(fields: [applicationId], references: [id])
  impactStatement ImpactStatement @relation(fields: [impactStatementId], references: [id])

  @@index([applicationId, impactStatementId])
}

model UserProjects {
  id   String @id @default(uuid())
  role String @default("member")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  userId    String
  projectId String

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
  @@index([userId, deletedAt])
  @@index([projectId, deletedAt])
}

model ProjectSnapshot {
  id            String @id @default(uuid())
  ipfsHash      String
  attestationId String

  createdAt DateTime @default(now())

  projectId String

  project Project @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

model ProjectRepository {
  id                String  @id @default(uuid())
  type              String
  url               String  @unique
  name              String?
  description       String?
  verified          Boolean @default(false)
  openSource        Boolean @default(false)
  containsContracts Boolean @default(false)
  npmPackage        Boolean @default(false)
  crate             Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectId String

  project Project @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

model ProjectLinks {
  id          String  @id @default(uuid())
  url         String
  name        String?
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectId String

  project Project @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

model ProjectContract {
  id                  String  @id @default(uuid())
  contractAddress     String
  deployerAddress     String
  deploymentHash      String
  verificationProof   String
  chainId             Int
  verificationChainId Int?
  name                String?
  description         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectId String

  project Project @relation(fields: [projectId], references: [id])

  @@unique([contractAddress, chainId])
  @@index([projectId])
  @@index([deployerAddress])
}

model PublishedContract {
  id                  String  @id @default(uuid())
  contract            String
  chainId             Int
  deployer            String
  deploymentTx        String
  signature           String
  verificationChainId Int
  projectId           String

  createdAt DateTime @default(now())
  revokedAt DateTime?

  project Project @relation(fields: [projectId], references: [id])
}

model ProjectFunding {
  id           String  @id @default(uuid())
  type         String
  grant        String?
  grantUrl     String?
  amount       String
  receivedAt   String
  details      String?
  fundingRound String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectId String

  project Project @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

model ApiUser {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  api_key     String    @unique
  email       String?
  address     String?
  chain_id    Int?
  description String?
  enabled     Boolean   @default(true)
  created_at  DateTime? @default(now()) @db.Date
  updated_at  DateTime? @default(now()) @db.Date

  @@index([api_key])
  @@map("api_users")
}

model Badgeholder {
  address String
  roundId String

  @@unique([address, roundId])
}

model GithubProximity {
  peer String
  percentile Float

  @@unique([peer])
}
