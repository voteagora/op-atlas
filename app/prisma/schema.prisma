generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String             @id @default(uuid())
  name               String?
  username           String?
  farcasterId        String?            @unique
  imageUrl           String?
  bio                String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  deletedAt          DateTime?
  github             String?
  notDeveloper       Boolean            @default(false)
  govForumProfileUrl String?
  discord            String?
  privyDid           String?
  citizen            Citizen?
  RewardClaim        RewardClaim[]
  roleApplications   RoleApplication[]
  addresses          UserAddress[]
  emails             UserEmail[]
  interaction        UserInteraction?
  organizations      UserOrganization[]
  passports          UserPassport[]
  projects           UserProjects[]
  worldId            UserWorldId?
  changelog          UserChangelog[]

  @@index([username])
  @@index([farcasterId])
  @@index([deletedAt])
}

model UserEmail {
  id        String   @id @default(uuid())
  email     String   @unique
  userId    String
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model UserInteraction {
  id                     String   @id @default(uuid())
  userId                 String   @unique
  finishSetupLinkClicked Boolean  @default(false)
  orgSettingsVisited     Boolean  @default(false)
  profileVisitCount      Int      @default(0)
  viewProfileClicked     Boolean  @default(false)
  homePageViewCount      Int      @default(0)
  lastInteracted         DateTime @default(now())
  user                   User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model UserAddress {
  address   String   @unique
  userId    String
  source    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  primary   Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])

  @@id([address, userId])
  @@index([userId])
}

model UserPassport {
  id        Int      @id @default(autoincrement())
  userId    String
  address   String   @unique
  score     Decimal  @db.Decimal(10, 3)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model FundingRound {
  id               String            @id
  name             String
  imageUrl         String
  description      String
  rewards          String?
  startDate        DateTime
  endDate          DateTime
  applications     Application[]
  Category         Category[]
  recipients       FundingReward[]
  ImpactStatement  ImpactStatement[]
  ProjectOSO       ProjectOSO[]
  recurringRewards RecurringReward[]
  rewardStream     RewardStream[]
}

model FundingReward {
  id        String       @id
  roundId   String
  projectId String
  amount    Decimal
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  project   Project      @relation(fields: [projectId], references: [id])
  round     FundingRound @relation(fields: [roundId], references: [id])
  claim     RewardClaim?

  @@unique([roundId, projectId])
  @@index([projectId])
}

model RewardClaim {
  rewardId                  String        @id
  status                    String
  address                   String?
  addressSetAt              DateTime?
  addressSetById            String?
  tokenStreamStatus         String?
  tokenStreamClaimableAt    DateTime?
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime      @updatedAt
  kycStatus                 String?
  kycStatusUpdatedAt        DateTime?
  grantEligibilityUpdatedAt DateTime?
  addressSetBy              User?         @relation(fields: [addressSetById], references: [id])
  reward                    FundingReward @relation(fields: [rewardId], references: [id])
}

model Organization {
  id                   String                 @id @default(uuid())
  name                 String
  description          String?
  avatarUrl            String?
  coverUrl             String?
  website              String[]
  farcaster            String[]
  twitter              String?
  mirror               String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  deletedAt            DateTime?
  OrganizationKYCTeams OrganizationKYCTeam[]
  snapshots            OrganizationSnapshot[]
  projects             ProjectOrganization[]
  roleApplications     RoleApplication[]
  team                 UserOrganization[]

  @@index([deletedAt])
}

model OrganizationSnapshot {
  id             String       @id @default(uuid())
  ipfsHash       String
  attestationId  String
  createdAt      DateTime     @default(now())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
}

model UserOrganization {
  id             String       @id @default(uuid())
  role           String       @default("member")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  userId         String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@unique([userId, organizationId])
  @@index([organizationId])
  @@index([userId, deletedAt, role])
  @@index([deletedAt])
  @@index([userId])
}

model ProjectOrganization {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  projectId      String       @unique
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  project        Project      @relation(fields: [projectId], references: [id])

  @@unique([projectId, organizationId])
  @@index([organizationId])
  @@index([projectId, deletedAt])
}

model Project {
  id                        String                           @id @default(uuid())
  name                      String
  description               String?
  category                  String?
  thumbnailUrl              String?
  bannerUrl                 String?
  website                   String[]
  farcaster                 String[]
  twitter                   String?
  mirror                    String?
  openSourceObserverSlug    String?
  addedTeamMembers          Boolean                          @default(false)
  addedFunding              Boolean                          @default(false)
  lastMetadataUpdate        DateTime                         @default(now())
  createdAt                 DateTime                         @default(now())
  updatedAt                 DateTime                         @updatedAt
  deletedAt                 DateTime?
  hasCodeRepositories       Boolean                          @default(true)
  isOnChainContract         Boolean                          @default(true)
  pricingModel              String?
  pricingModelDetails       String?
  isSubmittedToOso          Boolean                          @default(false)
  defiLlamaSlug             String[]
  kycTeamId                 String?
  applications              Application[]
  rewards                   FundingReward[]
  kycTeam                   KYCTeam?                         @relation(fields: [kycTeamId], references: [id])
  contracts                 ProjectContract[]
  funding                   ProjectFunding[]
  links                     ProjectLinks[]
  ProjectOSO                ProjectOSO[]
  sourceProjects            ProjectOSOAtlasRelatedProjects[] @relation("sourceProject")
  targetProjects            ProjectOSOAtlasRelatedProjects[] @relation("targetProject")
  ProjectOSOMetrics         ProjectOSOMetrics[]
  ProjectOSORelatedProjects ProjectOSORelatedProjects[]
  organization              ProjectOrganization?
  repos                     ProjectRepository[]
  snapshots                 ProjectSnapshot[]
  publishedContracts        PublishedContract[]
  recurringRewards          RecurringReward[]
  team                      UserProjects[]
  projectOSOData            projectOSOData[]
  blacklist                 ProjectBlacklist?
  changelog                 ProjectChangelog[]

  @@index([deletedAt, createdAt])
  @@index([deletedAt])
}

model ProjectBlacklist {
  id        String   @id @default(uuid())
  projectId String   @unique
  reason    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([projectId])
}

model Application {
  id                        String                  @id @default(uuid())
  status                    String                  @default("submitted")
  attestationId             String
  createdAt                 DateTime                @default(now())
  updatedAt                 DateTime                @updatedAt
  roundId                   String
  projectId                 String
  categoryId                String?
  projectDescriptionOptions String[]
  category                  Category?               @relation(fields: [categoryId], references: [id])
  project                   Project                 @relation(fields: [projectId], references: [id])
  round                     FundingRound            @relation(fields: [roundId], references: [id])
  impactStatementAnswer     ImpactStatementAnswer[]
  changelog                 ApplicationChangelog[]

  @@index([projectId])
  @@index([roundId])
  @@index([categoryId])
}

model Category {
  id               String            @id @default(uuid())
  name             String
  description      String
  imageUrl         String?
  question         String
  options          String[]
  roundId          String?
  isMultipleChoice Boolean           @default(true)
  application      Application[]
  round            FundingRound?     @relation(fields: [roundId], references: [id])
  impactStatements ImpactStatement[]
}

model ImpactStatement {
  id                     String                  @id @default(uuid())
  categoryId             String
  question               String
  subtext                String?
  isRequired             Boolean                 @default(true)
  isMarkdownSupported    Boolean                 @default(true)
  roundId                String?
  limitToCategoryOptions Int[]                   @default([])
  selectionOptions       String[]
  category               Category                @relation(fields: [categoryId], references: [id])
  round                  FundingRound?           @relation(fields: [roundId], references: [id])
  impactStatementAnswer  ImpactStatementAnswer[]

  @@index([categoryId])
}

model ImpactStatementAnswer {
  id                String          @id @default(uuid())
  applicationId     String
  impactStatementId String
  answer            String
  application       Application     @relation(fields: [applicationId], references: [id])
  impactStatement   ImpactStatement @relation(fields: [impactStatementId], references: [id])

  @@index([applicationId, impactStatementId])
}

model UserProjects {
  id        String    @id @default(uuid())
  role      String    @default("member")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  userId    String
  projectId String
  project   Project   @relation(fields: [projectId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@unique([userId, projectId])
  @@index([userId, deletedAt])
  @@index([projectId, deletedAt])
}

model ProjectSnapshot {
  id            String   @id @default(uuid())
  ipfsHash      String
  attestationId String
  createdAt     DateTime @default(now())
  projectId     String
  project       Project  @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

model ProjectRepository {
  id                String   @id @default(uuid())
  type              String
  url               String   @unique
  verified          Boolean  @default(false)
  openSource        Boolean  @default(false)
  containsContracts Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  projectId         String
  description       String?
  name              String?
  crate             Boolean  @default(false)
  npmPackage        Boolean  @default(false)
  project           Project  @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

model ProjectLinks {
  id          String   @id @default(uuid())
  url         String
  name        String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

model ProjectContract {
  id                  String   @id @default(uuid())
  contractAddress     String
  deployerAddress     String
  deploymentHash      String
  verificationProof   String
  chainId             Int
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  projectId           String
  description         String?
  name                String?
  verificationChainId Int?
  project             Project  @relation(fields: [projectId], references: [id])

  @@unique([contractAddress, chainId])
  @@index([projectId])
  @@index([deployerAddress])
}

model PublishedContract {
  id                  String    @id @default(uuid())
  contract            String
  chainId             Int
  deployer            String
  deploymentTx        String
  signature           String
  verificationChainId Int
  projectId           String
  createdAt           DateTime  @default(now())
  revokedAt           DateTime?
  project             Project   @relation(fields: [projectId], references: [id])
}

model ProjectFunding {
  id           String   @id @default(uuid())
  type         String
  grant        String?
  grantUrl     String?
  amount       String
  receivedAt   String
  details      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  projectId    String
  fundingRound String?
  project      Project  @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

model ApiUser {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  api_key     String    @unique
  email       String?
  address     String?
  chain_id    Int?
  description String?
  enabled     Boolean   @default(true)
  created_at  DateTime? @default(now()) @db.Date
  updated_at  DateTime? @default(now()) @db.Date

  @@index([api_key])
  @@map("api_users")
}

model Badgeholder {
  address String
  roundId String

  @@unique([address, roundId])
}

model GithubProximity {
  peer       String @unique
  percentile Float
}

model ContactEmailTags {
  id        String   @id @default(uuid())
  email     String   @unique
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
}

model KYCUser {
  id           String         @id @default(uuid())
  email        String
  firstName    String
  lastName     String
  businessName String?
  status       KYCStatus      @default(PENDING)
  expiry       DateTime
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  KYCUserTeams KYCUserTeams[]

  @@index([email])
}

model KYCTeam {
  id                   String                @id @default(uuid())
  walletAddress        String                @unique
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  deletedAt            DateTime?
  team                 KYCUserTeams[]
  OrganizationKYCTeams OrganizationKYCTeam[]
  projects             Project[]
  rewardStreams        RewardStream[]
  superfludStream      SuperfluidStream[]

  @@index([walletAddress])
}

model KYCUserTeams {
  id        String   @id @default(uuid())
  kycUserId String
  kycTeamId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  team      KYCTeam  @relation(fields: [kycTeamId], references: [id], onDelete: Cascade)
  users     KYCUser  @relation(fields: [kycUserId], references: [id])

  @@index([kycUserId])
  @@index([kycTeamId])
}

model OrganizationKYCTeam {
  id             String       @id @default(uuid())
  organizationId String
  kycTeamId      String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  team           KYCTeam      @relation(fields: [kycTeamId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
  @@index([kycTeamId])
}

model ProjectOSO {
  id        String        @id @default(uuid())
  projectId String
  osoId     String
  roundId   String?
  project   Project       @relation(fields: [projectId], references: [id])
  round     FundingRound? @relation(fields: [roundId], references: [id])

  @@index([projectId])
  @@index([osoId])
}

model projectOSOData {
  id        String  @id @default(uuid())
  projectId String
  osoId     String
  data      Json
  project   Project @relation(fields: [projectId], references: [id])

  @@index([projectId])
  @@index([osoId])
}

model RecurringReward {
  id        String       @id @default(uuid())
  roundId   String
  tranche   Int
  projectId String
  amount    String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now())
  deletedAt DateTime?
  project   Project      @relation(fields: [projectId], references: [id])
  round     FundingRound @relation(fields: [roundId], references: [id])

  @@unique([roundId, tranche, projectId])
  @@index([projectId])
  @@index([roundId])
  @@index([tranche])
}

model SuperfluidStream {
  id               String        @id
  sender           String
  receiver         String
  flowRate         String
  deposit          String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @default(now())
  deletedAt        DateTime?
  internalStreamId String?
  rewardStream     RewardStream? @relation(fields: [internalStreamId], references: [id])
  kycTeam          KYCTeam       @relation(fields: [receiver], references: [walletAddress])

  @@unique([sender, receiver])
  @@index([sender])
  @@index([receiver])
  @@index([internalStreamId])
}

model RewardStream {
  id        String             @id
  projects  String[]
  roundId   String
  createdAt DateTime           @default(now())
  kycTeamId String
  team      KYCTeam            @relation(fields: [kycTeamId], references: [id])
  round     FundingRound       @relation(fields: [roundId], references: [id])
  streams   SuperfluidStream[]

  @@index([roundId])
}

model ProjectOSOMetrics {
  id        String           @id @default(uuid())
  projectId String
  metric    ProjectOSOMetric
  tranche   Int
  value     String
  project   Project          @relation(fields: [projectId], references: [id])

  @@unique([projectId, metric, tranche])
  @@index([projectId])
  @@index([metric])
  @@index([tranche])
}

model ProjectOSORelatedProjects {
  id        String  @id @default(uuid())
  projectId String
  tranche   Int
  osoId     String
  project   Project @relation(fields: [projectId], references: [id])

  @@unique([projectId, tranche, osoId])
  @@index([projectId])
  @@index([osoId])
}

model ProjectOSOAtlasRelatedProjects {
  id               String  @id @default(uuid())
  projectId        String
  tranche          Int
  relatedProjectId String
  sourceProject    Project @relation("sourceProject", fields: [projectId], references: [id])
  targetProject    Project @relation("targetProject", fields: [relatedProjectId], references: [id])

  @@unique([projectId, tranche, relatedProjectId])
  @@index([projectId])
  @@index([relatedProjectId])
}

model Citizen {
  id             Int      @id @default(autoincrement())
  userId         String   @unique
  address        String?  @unique
  type           String
  attestationId  String?
  timeCommitment String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  organizationId String?
  projectId      String?
  user           User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([projectId])
  @@index([organizationId])
}

model S8QualifyingUser {
  address String @id

  @@index([address])
}

model S8QualifyingChain {
  organizationId String @id

  @@index([organizationId])
}

model S8QualifyingProject {
  projectId String @id

  @@index([projectId])
}

model UserWorldId {
  id            Int      @id @default(autoincrement())
  userId        String   @unique
  verified      Boolean  @default(false)
  nullifierHash String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Role {
  id           Int               @id @default(autoincrement())
  title        String
  link         String?
  description  String?
  requirements Json              @default("{}")
  startAt      DateTime?
  endAt        DateTime?
  voteStartAt  DateTime?
  voteEndAt    DateTime?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @default(now()) @updatedAt
  applications RoleApplication[]
}

model RoleApplication {
  id             Int                   @id @default(autoincrement())
  status         RoleApplicationStatus
  roleId         Int
  userId         String?
  organizationId String?
  application    String
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @default(now()) @updatedAt
  organization   Organization?         @relation(fields: [organizationId], references: [id])
  role           Role                  @relation(fields: [roleId], references: [id])
  user           User?                 @relation(fields: [userId], references: [id])

  @@index([roleId])
  @@index([userId])
  @@index([organizationId])
}

view OffChainVote {
  attestationId   String          @id
  voterAddress    String
  proposalId      String
  vote            Json
  transactionHash String?
  citizenId       Int
  citizenCategory citizenCategory
  createdAt       DateTime        @db.Timestamptz(6)

  @@unique([proposalId, citizenId])
}

enum KYCStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ProjectOSOMetric {
  TVL
  GAS_FEES
  ACTIVE_ADDRESSES_COUNT
  TRANSACTION_COUNT
  HAS_DEFILLAMA_ADAPTER
  HAS_BUNDLE_BEAR
  IS_ONCHAIN_BUILDER_ELIGIBLE
  IS_DEV_TOOLING_ELIGIBLE
  STAR_COUNT
  FORK_COUNT
  NUM_PACKAGES_IN_DEPS_DEV
  PACKAGE_CONNECTION_COUNT
  DEVELOPER_CONNECTION_COUNT
  TRUSTED_DEVELOPER_USERNAME
  DOWNSTREAM_GAS
}

enum citizenCategory {
  CHAIN
  APP
  USER
}

enum RoleApplicationStatus {
  pending
  approved
  rejected
}

model UserChangelog {
  id        String   @id @default(uuid())
  userId    String
  action    String
  oldData   Json?
  newData   Json?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

model ProjectChangelog {
  id          String   @id @default(uuid())
  projectId   String
  action      String
  performedBy String?
  oldData     Json?
  newData     Json?
  createdAt   DateTime @default(now())
  project     Project  @relation(fields: [projectId], references: [id])

  @@index([projectId])
  @@index([action])
  @@index([createdAt])
}

model ApplicationChangelog {
  id            String      @id @default(uuid())
  applicationId String
  action        String
  performedBy   String?
  oldData       Json?
  newData       Json?
  createdAt     DateTime    @default(now())
  application   Application @relation(fields: [applicationId], references: [id])

  @@index([applicationId])
  @@index([action])
  @@index([createdAt])
}
