generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String             @id @default(uuid())
  name               String?
  username           String?
  farcasterId        String             @unique
  imageUrl           String?
  bio                String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  deletedAt          DateTime?
  github             String?
  notDeveloper       Boolean            @default(false)
  govForumProfileUrl String?
  discord            String?
  RewardClaim        RewardClaim[]
  addresses          UserAddress[]
  emails             UserEmail[]
  interaction        UserInteraction?
  organizations      UserOrganization[]
  projects           UserProjects[]

  @@index([username])
  @@index([farcasterId])
  @@index([deletedAt])
}

model UserEmail {
  id        String   @id @default(uuid())
  email     String
  userId    String
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  tags      String[]

  @@index([userId])
}

model UserInteraction {
  id                     String   @id @default(uuid())
  userId                 String   @unique
  finishSetupLinkClicked Boolean  @default(false)
  orgSettingsVisited     Boolean  @default(false)
  profileVisitCount      Int      @default(0)
  viewProfileClicked     Boolean  @default(false)
  homePageViewCount      Int      @default(0)
  lastInteracted         DateTime @default(now())
  user                   User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model UserAddress {
  address   String
  userId    String
  source    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@id([address, userId])
  @@index([userId])
}

model FundingRound {
  id              String            @id
  name            String
  imageUrl        String
  description     String
  rewards         String?
  startDate       DateTime
  endDate         DateTime
  applications    Application[]
  Category        Category[]
  recipients      FundingReward[]
  ImpactStatement ImpactStatement[]
}

model FundingReward {
  id        String       @id
  roundId   String
  projectId String
  amount    Decimal
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  project   Project      @relation(fields: [projectId], references: [id])
  round     FundingRound @relation(fields: [roundId], references: [id])
  claim     RewardClaim?

  @@unique([roundId, projectId])
  @@index([projectId])
}

model RewardClaim {
  rewardId                  String        @id
  status                    String
  address                   String?
  addressSetAt              DateTime?
  addressSetById            String?
  tokenStreamStatus         String?
  tokenStreamClaimableAt    DateTime?
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime      @updatedAt
  kycStatus                 String?
  kycStatusUpdatedAt        DateTime?
  grantEligibilityUpdatedAt DateTime?
  addressSetBy              User?         @relation(fields: [addressSetById], references: [id])
  reward                    FundingReward @relation(fields: [rewardId], references: [id])
}

model Organization {
  id          String                 @id @default(uuid())
  name        String
  description String?
  avatarUrl   String?
  coverUrl    String?
  website     String[]
  farcaster   String[]
  twitter     String?
  mirror      String?
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  deletedAt   DateTime?
  snapshots   OrganizationSnapshot[]
  projects    ProjectOrganization[]
  team        UserOrganization[]

  @@index([deletedAt])
}

model OrganizationSnapshot {
  id             String       @id @default(uuid())
  ipfsHash       String
  attestationId  String
  createdAt      DateTime     @default(now())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
}

model UserOrganization {
  id             String       @id @default(uuid())
  role           String       @default("member")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  userId         String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@unique([userId, organizationId])
  @@index([organizationId])
  @@index([userId, deletedAt, role])
  @@index([deletedAt])
  @@index([userId])
}

model ProjectOrganization {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  projectId      String       @unique
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  project        Project      @relation(fields: [projectId], references: [id])

  @@unique([projectId, organizationId])
  @@index([organizationId])
  @@index([projectId, deletedAt])
}

model Project {
  id                     String               @id @default(uuid())
  name                   String
  description            String?
  category               String?
  thumbnailUrl           String?
  bannerUrl              String?
  website                String[]
  farcaster              String[]
  twitter                String?
  mirror                 String?
  openSourceObserverSlug String?
  addedTeamMembers       Boolean              @default(false)
  addedFunding           Boolean              @default(false)
  lastMetadataUpdate     DateTime             @default(now())
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  deletedAt              DateTime?
  hasCodeRepositories    Boolean              @default(true)
  isOnChainContract      Boolean              @default(true)
  pricingModel           String?
  pricingModelDetails    String?
  isSubmittedToOso       Boolean              @default(false)
  applications           Application[]
  rewards                FundingReward[]
  contracts              ProjectContract[]
  funding                ProjectFunding[]
  links                  ProjectLinks[]
  organization           ProjectOrganization?
  repos                  ProjectRepository[]
  snapshots              ProjectSnapshot[]
  team                   UserProjects[]

  @@index([deletedAt, createdAt])
  @@index([deletedAt])
}

model Application {
  id                        String                  @id @default(uuid())
  status                    String                  @default("submitted")
  attestationId             String
  createdAt                 DateTime                @default(now())
  updatedAt                 DateTime                @updatedAt
  roundId                   String
  projectId                 String
  categoryId                String?
  projectDescriptionOptions String[]
  category                  Category?               @relation(fields: [categoryId], references: [id])
  project                   Project                 @relation(fields: [projectId], references: [id])
  round                     FundingRound            @relation(fields: [roundId], references: [id])
  impactStatementAnswer     ImpactStatementAnswer[]

  @@index([projectId])
  @@index([roundId])
  @@index([categoryId])
}

model Category {
  id               String            @id @default(uuid())
  name             String
  description      String
  imageUrl         String?
  question         String
  options          String[]
  roundId          String?
  isMultipleChoice Boolean           @default(true)
  application      Application[]
  round            FundingRound?     @relation(fields: [roundId], references: [id])
  impactStatements ImpactStatement[]
}

model ImpactStatement {
  id                     String                  @id @default(uuid())
  categoryId             String
  question               String
  subtext                String?
  isRequired             Boolean                 @default(true)
  isMarkdownSupported    Boolean                 @default(true)
  roundId                String?
  limitToCategoryOptions Int[]                   @default([])
  selectionOptions       String[]
  category               Category                @relation(fields: [categoryId], references: [id])
  round                  FundingRound?           @relation(fields: [roundId], references: [id])
  impactStatementAnswer  ImpactStatementAnswer[]

  @@index([categoryId])
}

model ImpactStatementAnswer {
  id                String          @id @default(uuid())
  applicationId     String
  impactStatementId String
  answer            String
  application       Application     @relation(fields: [applicationId], references: [id])
  impactStatement   ImpactStatement @relation(fields: [impactStatementId], references: [id])

  @@index([applicationId, impactStatementId])
}

model UserProjects {
  id        String    @id @default(uuid())
  role      String    @default("member")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  userId    String
  projectId String
  project   Project   @relation(fields: [projectId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@unique([userId, projectId])
  @@index([userId, deletedAt])
  @@index([projectId, deletedAt])
}

model ProjectSnapshot {
  id            String   @id @default(uuid())
  ipfsHash      String
  attestationId String
  createdAt     DateTime @default(now())
  projectId     String
  project       Project  @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

model ProjectRepository {
  id                String   @id @default(uuid())
  type              String
  url               String   @unique
  verified          Boolean  @default(false)
  openSource        Boolean  @default(false)
  containsContracts Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  projectId         String
  description       String?
  name              String?
  crate             Boolean  @default(false)
  npmPackage        Boolean  @default(false)
  project           Project  @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

model ProjectLinks {
  id          String   @id @default(uuid())
  url         String
  name        String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

model ProjectContract {
  id                String   @id @default(uuid())
  contractAddress   String
  deployerAddress   String
  deploymentHash    String
  verificationProof String
  chainId           Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  projectId         String
  description       String?
  name              String?
  project           Project  @relation(fields: [projectId], references: [id])

  @@unique([contractAddress, chainId])
  @@index([projectId])
}

model ProjectFunding {
  id           String   @id @default(uuid())
  type         String
  grant        String?
  grantUrl     String?
  amount       String
  receivedAt   String
  details      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  projectId    String
  fundingRound String?
  project      Project  @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

model ApiUser {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  api_key     String    @unique
  email       String?
  address     String?
  chain_id    Int?
  description String?
  enabled     Boolean   @default(true)
  created_at  DateTime? @default(now()) @db.Date
  updated_at  DateTime? @default(now()) @db.Date

  @@index([api_key])
  @@map("api_users")
}

model Badgeholder {
  address String
  roundId String

  @@unique([address, roundId])
}

model GithubProximity {
  peer       String @unique
  percentile Float
}
